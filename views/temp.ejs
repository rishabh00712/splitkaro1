<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Roboto:wght@400;500&display=swap" rel="stylesheet">
  <title>Enhanced Voice Expense Tracker</title>
  <style>
    :root {
      --primary-color: #4361ee;  /* Brand accent color */
      --secondary-color: #f8f9fa; /* Secondary background */
      --background-color: #ffffff; /* Main background */
      --text-color: #2b2d42;       /* Primary text color */
    }
    body {
      font-family: 'Roboto', 'Open Sans', 'Lato', sans-serif;
      margin: 20px;
      background-color: var(--background-color);
      color: var(--text-color);
    }
    h1 {
      font-family: 'Montserrat', 'League Spartan', sans-serif;
      font-weight: 700;
      color: var(--text-color);
      margin-bottom: 1.5rem;
    }
    button {
      margin: 5px;
      padding: 12px 24px;
      border-radius: 8px;
      border: none;
      background-color: var(--primary-color);
      color: white;
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    button:hover {
      background-color: #3a50d1;
      transform: translateY(-1px);
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 20px;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    th, td {
      border: 1px solid #e9ecef;
      padding: 12px;
      text-align: left;
    }
    th {
      background-color: var(--secondary-color);
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }
    input[type="text"] {
      width: 90%;
      padding: 8px;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      font-family: 'Roboto', sans-serif;
    }
    #error-msg {
      color: #e63946;
      margin-top: 10px;
      height: 20px;
      font-weight: 500;
    }
    /* Status message styling */
    #status {
      position: fixed;
      top: 20px;
      right: 20px;
      background: var(--primary-color);
      color: white;
      padding: 12px 24px;
      border-radius: 8px;
      opacity: 0;
      transform: translateX(120%);
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      max-width: 300px;
      pointer-events: none;
      font-size: 0.9rem;
    }
    #status.active {
      opacity: 1;
      transform: translateX(0);
    }
    /* Loading spinner */
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    .loading {
      position: relative;
      pointer-events: none;
    }
    .loading::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 24px;
      height: 24px;
      margin: -12px 0 0 -12px;
      border: 3px solid rgba(255,255,255,0.3);
      border-top-color: white;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
    }
    /* Responsive adjustments */
    @media (max-width: 768px) {
      #status {
        top: 10px;
        right: 10px;
        left: 10px;
        max-width: none;
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <h1>Natural Voice Expense Tracker</h1>
  <button id="start-btn">Start Recording</button>
  <p id="status">Click and speak naturally</p>
  <div id="error-msg"></div>

  <!-- Wrap the table in a form -->

    <table id="data-table">
      <thead>
        <tr>
          <th>Amount</th>
          <th>Category</th>
          <th>Date</th>
          <th>Time</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="table-body">
      </tbody>
    </table>
    <!-- Submit button for the form -->
  

  <script>
    // Speech recognition setup
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    let recognition;
    if (!SpeechRecognition) {
      alert("Browser doesn't support Speech Recognition");
    } else {
      recognition = new SpeechRecognition();
      recognition.lang = 'en-US';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
    }

    const categories = {
      food: ['food', 'groceries', 'lunch', 'dinner', 'restaurant'],
      transport: ['taxi', 'bus', 'train', 'fuel', 'transport'],
      shopping: ['shopping', 'shirt', 'clothes', 'mall'],
      bills: ['bill', 'electricity', 'water', 'internet'],
      entertainment: ['movie', 'concert', 'game']
    };

    // Parse the transcript into fields.
    function parseSpeech(transcript) {
      // Amount detection (first number)
      const amount = transcript.match(/(\d+)(?:\s*(?:rs|rupees|dollars))?/i)?.[1] || '';

      // Date detection
      let date = new Date();
      const dateStrings = {
        yesterday: () => new Date(date.setDate(date.getDate() - 1)),
        tomorrow: () => new Date(date.setDate(date.getDate() + 1)),
        'next week': () => new Date(date.setDate(date.getDate() + 7))
      };

      const dateMatch = transcript.match(/(today|yesterday|tomorrow|next week|\d{4}-\d{2}-\d{2})/i);
      if (dateMatch) {
        const matched = dateMatch[0].toLowerCase();
        if (dateStrings[matched]) {
          date = dateStrings[matched]();
        } else if (matched.match(/\d{4}-\d{2}-\d{2}/)) {
          date = new Date(matched);
        }
      }

      // Category detection
      const lowerTranscript = transcript.toLowerCase();
      let category = '';
      for (const [cat, keywords] of Object.entries(categories)) {
        if (keywords.some(word => lowerTranscript.includes(word))) {
          category = cat;
          break;
        }
      }

      // Time detection: using current system time
      const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      return {
        amount,
        category,
        date: date.toISOString().split('T')[0],
        time
      };
    }

    const defaultStatusText = 'Click and speak naturally (e.g., "200 for groceries at Walmart yesterday")';
    const startBtn = document.getElementById('start-btn');
    const statusPara = document.getElementById('status');
    const errorMsgDiv = document.getElementById('error-msg');
    const tableBody = document.getElementById('table-body');
    const expenseForm = document.getElementById('expense-form');

    // Show temporary status message
    let timeoutId;
    function showStatus(message) {
      statusPara.textContent = message;
      statusPara.classList.add('active');
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        statusPara.classList.remove('active');
        statusPara.textContent = defaultStatusText;
      }, 2000);
    }

    startBtn.addEventListener('click', () => {
      if (recognition) {
        recognition.start();
        
      }
    });

    if (recognition) {
      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        const details = parseSpeech(transcript);
        console.log(details);

        if (!details.amount) {
          errorMsgDiv.textContent = "Your voice wasn't recognized. Please try again later.";
          setTimeout(() => {
            errorMsgDiv.textContent = "";
            statusPara.textContent = defaultStatusText;
          }, 2000);
          return;
        }
        console.lo
        showStatus("User voice all");
        addRow(details.amount, details.category || '', details.date || '', details.time || '');
      };

      recognition.onerror = (event) => {
        statusPara.textContent = "Error: " + event.error;
      };

      recognition.onend = () => {
        startBtn.classList.remove('loading');
      };
    }

    // Function to add a new row in the table.
    function addRow(amount, category, date, time) {
  const row = document.createElement('tr');
  console.log(category);
  console.log(date);
  row.innerHTML = `
    <td>${amount}</td>
    <td>${category || 'N/A'}</td>
    <td>${date || 'N/A'}</td>
    <td>${time || 'N/A'}</td>
    <td>
      <button class="edit">Edit</button>
      <button class="delete">Delete</button>
      <button class="add">Add</button>
    </td>
  `;
  row.querySelector('.delete').addEventListener('click', () => row.remove());
  row.querySelector('.edit').addEventListener('click', () => inlineEdit(row));
  
  row.querySelector('.add').addEventListener('click', () => sendAddRequest({ amount, category, date, time }));
  tableBody.appendChild(row);
}


    // Inline editing: allow editing of only Amount and Category.
    function inlineEdit(row) {
      const originalAmount = row.cells[0].textContent;
      const originalCategory = row.cells[1].textContent;

      for (let i = 0; i < 2; i++) {
        const input = document.createElement('input');
        input.type = 'text';
        input.value = row.cells[i].textContent === 'N/A' ? '' : row.cells[i].textContent;
        row.cells[i].innerHTML = '';
        row.cells[i].appendChild(input);
      }

      const actionsCell = row.cells[4];
      actionsCell.innerHTML = '';

      const saveBtn = document.createElement('button');
      saveBtn.type = 'button';
      saveBtn.textContent = 'Save';
      const cancelBtn = document.createElement('button');
      cancelBtn.type = 'button';
      cancelBtn.textContent = 'Cancel';

      saveBtn.addEventListener('click', () => {
        const newAmount = row.cells[0].querySelector('input').value.trim() || 'N/A';
        const newCategory = row.cells[1].querySelector('input').value.trim() || 'N/A';
        row.cells[0].textContent = newAmount;
        row.cells[1].textContent = newCategory;
        restoreActions(row);
      });

      cancelBtn.addEventListener('click', () => {
        row.cells[0].textContent = originalAmount;
        row.cells[1].textContent = originalCategory;
        restoreActions(row);
      });

      actionsCell.appendChild(saveBtn);
      actionsCell.appendChild(cancelBtn);
    }

    function restoreActions(row) {
      const actionsCell = row.cells[4];
      actionsCell.innerHTML = '';

      const editBtn = document.createElement('button');
      editBtn.type = 'button';
      editBtn.textContent = 'Edit';
      const deleteBtn = document.createElement('button');
      deleteBtn.type = 'button';
      deleteBtn.textContent = 'Delete';

      editBtn.addEventListener('click', () => inlineEdit(row));
      deleteBtn.addEventListener('click', () => row.remove());

      actionsCell.appendChild(editBtn);
      actionsCell.appendChild(deleteBtn);
    }

    // Intercept form submission to gather table data and send a POST request
    expenseForm.addEventListener('submit', function(e) {
      e.preventDefault();  // Prevent normal form submission

      // Collect expense data from table rows
      const expenses = [];
      const rows = tableBody.querySelectorAll('tr');
      rows.forEach(row => {
        const cells = row.querySelectorAll('td');
        expenses.push({
          amount: cells[0].textContent,
          category: cells[1].textContent,
          date: cells[2].textContent,
          time: cells[3].textContent
        });
      });

      // Example POST request. Replace '/api/expenses' with your actual backend endpoint.
      fetch('/api/expenses', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ expenses })
      })
      .then(response => {
        if (response.ok) {
          showStatus("Expenses submitted successfully!");
          // Optionally, clear the table or perform additional actions.
          tableBody.innerHTML = '';
        } else {
          showStatus("Failed to submit expenses.");
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showStatus("Error submitting expenses.");
      });
    });

    function sendAddRequest(expenseData) {
    console.log(expenseData);
  fetch('/add-voice', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(expenseData),
  })
  .then(response => {
    if (response.ok) {
      showStatus('Expense added successfully.');
    } else {
      showStatus('Failed to add expense.');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showStatus('An error occurred.');
  });
}

startBtn.addEventListener('click', () => {
  if (recognition) {
    if (startBtn.textContent === 'Start Recording') {
      recognition.start();
      startBtn.textContent = 'Stop Recording';
      startBtn.classList.add('loading');
      showStatus('Listening... Speak now!');
    } else {
      recognition.stop();
      startBtn.textContent = 'Start Recording';
      startBtn.classList.remove('loading');
      showStatus('Recording stopped.');
    }
  }
});

  </script>
</body>
</html>
